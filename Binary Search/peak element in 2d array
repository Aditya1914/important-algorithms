//Brute force linear search time complexity - O(n * m * 4) = O( n * m ) and constant space
 
//optimal Binary search time complexity - O((Log m )* n) and constant space

class Solution {
    public int[] findPeakGrid(int[][] mat) {
   int n = mat.length;
   int m = mat[0].length;
   int low = 0,high = m-1;

   while(low <= high){
       int mid = low +(high- low)/2;
       int row = maxEle(mat,mid);
       int left = mid -1 >= 0 ? mat[row][mid-1] : -1;
       int right = mid +1 < m ? mat[row][mid +1] : -1;
       if(mat[row][mid] > left && mat[row][mid] > right){
           return new int[] {row,mid};
       }
       else if( mat[row][mid] < right)low = mid +1;
       else high = mid -1;
   }
   return new int[] {-1,-1};
    }
    public int maxEle(int [][]mat,int mid){
      int n = mat.length , m = mat[0].length,max = Integer.MIN_VALUE;
      int index = -1;
      for(int i  = 0; i < n; i++){
        if( max < mat[i][mid]){
            max = mat[i][mid];
            index = i;
        } 
         
      }
      return index;
    }  
}
