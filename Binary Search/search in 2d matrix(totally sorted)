class Solution 
{ 
    //not a brute force but the atleast better solution O(n + log(m))
    static boolean BS(int arr[] , int x){
        int low = 0;
        int high = arr.length;
        int ans = arr.length;
        while(low <= high){
            int mid = low + (high - low )/2;
            if( arr[mid] == x )return true;
            if( arr[mid] < x)low = mid +1;
            else high = mid -1;
            
        }
        
        return false;
    }
    
	static boolean search(int mat[][], int n, int m, int x) 
	{  
	   
	    for(int i = 0; i < n; i++){
	        if( mat[i][0] <= x && mat[i][n-1] >= x){
	        if( BS(mat[i],x))return true;
	            
	        }
	        
	    }
	    return false;
	    
	} 
	
} 


//optimal solution , tc - O(log(m*n)) , sc - O(1)
class Solution {
    public boolean searchMatrix(int[][] mat, int x) {
   
	 int n = mat.length;
	 int m = mat[0].length;  
       	   
	 int low = 0;
	 int high = (n * m )-1;
	 while( low <= high){
	     int mid = low +(high - low )/2;
	     int row = mid/m;
	     int col = mid % m;
	     if( mat[row][col] == x )return true;
	     else if( mat[row][col] < x)low = mid +1;
	     else high = mid -1;
	 }
	 return false;
    }
}
