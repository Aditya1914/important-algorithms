class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string> path;
        partition_helper(0 , s , path , ans);
        return ans;
    }
    void partition_helper(int idx , string s, vector<string> &path , vector<vector<string>> &ans){
        if( idx == s.size()){
            ans.emplace_back(path);
            return;
        }

        for(int i = idx; i < s.size(); i++){
            if( isPalindrome(s, idx ,i)){
                path.emplace_back(s.substr(idx, i - idx +1 ));
                partition_helper(i+1,s, path,ans );
                path.pop_back();
            }
        }
    }
    bool isPalindrome(string s, int start , int end){
        while( start <= end){
            if( s[start++] != s[end--])return false;
        }
        return true;
    }
};
