class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
      vector<vector<int>> ans;
      vector<int> temp;
      sort(candidates.begin(),candidates.end());
      recurfunc(ans , temp , candidates , target , 0);
      return ans;
    }
   void recurfunc(vector<vector<int>> &ans, vector<int> &temp, vector<int> &candidates, int target , int idx){
        if( target == 0){
            ans.push_back(temp);
            return;
        }
        

        for(int i = idx ; i < candidates.size(); i++){
            if((i > idx) && (candidates[i] == candidates[i-1])){
                continue;
            }
            if( candidates[i] > target)break;
            temp.push_back(candidates[i]);
            recurfunc(ans , temp , candidates, target - candidates[i], i +1);
            temp.pop_back();
        }
    }
};

TC - O(2 ^ N *  K)
SC - O(N)
