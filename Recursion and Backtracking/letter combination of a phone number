class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0)return {}; //c++11 list initialization or return vector<string>()
        vector<string> v, ans;
        v.push_back("0");
        v.push_back("1");
        v.push_back("abc");
        v.push_back("def");
        v.push_back("ghi");
        v.push_back("jkl");
        v.push_back("mno");
        v.push_back("pqrs");
        v.push_back("tuv");
        v.push_back("wxyz");
        string temp;
        helper(0 , digits, temp , v , ans);
        return ans;
        
    }
    void helper(int idx, string &digits, string &temp ,  vector<string> &v , vector<string> &ans){
        if( idx == digits.size()){
            ans.push_back(temp);
            return;
        }
        int num = digits[idx] - '0';
        string str = v[num];
        for(int i = 0 ;i < str.size(); i++){
            temp.push_back(str[i]);
            helper(idx+1, digits,temp, v , ans);
            temp.pop_back();
        }
    }
};

TC - O(N *N) (where N = digits[1] - digits[0])
SC - O(N)
